 
###Helm client Installation ###

#helm install

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

=================================================


### load balancer service

kind: Service
apiVersion: v1
metadata:
  name: loadbalancer-service
spec:
  type: LoadBalancer
  selector:
    app: tomcat
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
	
==================================

#### Node port service ########
	
kind: Service
apiVersion: v1
metadata:
  name: loadbalancer-service
spec:
  type: NodePort
  selector:
    app: tomcat
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080	
	
======================================
#### intsall nginx ingress controller using helm ####

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
 

kubectl create ns ingress-nginx
 
	
helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux	
	

##########  Create ingress object ####


apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test-tls-ingress
  namespace: jenkins
spec:
  tls:
  - hosts:
      - www.aws.com
    secretName: tls-secret
  rules:
  - host: www.xyz.com
    http:
      paths:
      - path: /
        backend:
          serviceName: myjenkins-agent
          servicePort: 50000
		  



apiVersion: apps/v1
kind: Deployment
metadata:
 name: hpa-demo-deployment
spec:
 selector:
   matchLabels:
     run: hpa-demo-deployment
 replicas: 1
 template:
   metadata:
     labels:
       run: hpa-demo-deployment
   spec:
     containers:
     - name: hpa-demo-deployment
       image: k8s.gcr.io/hpa-example
       ports:
       - containerPort: 80
       resources:
         limits:
           cpu: 500m
         requests:
           cpu: 200m
		   
		   
##########svc #######

apiVersion: v1
kind: Service
metadata:
 name: hpa-demo-deployment
 labels:
   run: hpa-demo-deployment
spec:
 ports:
 - port: 80
 selector:
   run: hpa-demo-deployment

#########HPA ################

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
 name: hpa-demo-deployment
spec:
 scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: hpa-demo-deployment
 minReplicas: 1
 maxReplicas: 10
 targetCPUUtilizationPercentage: 50
 
 
 ====================  generate load over application ================
 
kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://hpa-demo-deployment; done"


============================

### Troubelshooting way if URL application down

 
if you are using loadbalancer as a service   
   
1 -   First you have check status of pod
   
2 -   you have to check service are there or not
   
3 -   you have to check lable and selector are match in both side pod and service

case -02 - If you are using ingress object

4 - Ingress object are created for those application or not  -- if not  then we have to created ingress object using yaml

5 - Ingress object already created but still i am getting same error

6 - in this WE have to validate correct service name inside the object and port no. 		  